{
  "version": 3,
  "file": "vis.js",
  "sourceRoot": "..",
  "sources": [
    "vis.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# toggle amount of info per box\n#   main: symbol\n#   add four more as grid (x x) (x x)\n#   demonstrate using template\n#\n# grid numbers\n#   period x group\n#\n# height range on legend\n#   min .. max, filter\n#\n# select (with grid numbers, legend boxes, height range)\n#   unselected -> fade\n\n# Write\n# links to wikipedia article, scraper\n#   \"Please do not use a web crawler to download large numbers of articles. Aggressive crawling of the server can cause a dramatic slow-down of Wikipedia.\"\n# description of visualization\n# more comments\n# Credit: Bostock\n\n# Call d3.json once the\n# \"document has finished loading (but not its dependent resources)\"\n\nvis = undefined\n\nconsole.log \"Starting animated periodic table.\"\n\nwindow.addEventListener 'DOMContentLoaded', ->\n    # Print them\n    vis = mk_periodic_table()\n    vis.root (d3.select('div.vis')\n        .append('div').classed('periodic_table', true))\n    vis all_chemical_elements\n    console.log \"Started animated periodic table.\"\n\nniceFormat = (n) ->\n    if Math.log10(n) > 3\n        d3.format(',.4s')(n)\n    else\n        d3.format(',.2f')(n)\n\ninterpolateFloor = (a, b) ->\n    a = +a\n    b = +b\n    (t) -> Math.floor(a * (1 - t) + b * t)\n\nperceivable_inverse = (col) ->\n    c = d3.hcl col\n    oc = d3.hcl col\n\n    if col == 'black' or col == '#000' or col == '#000000'\n        # kindof fixes bug with d3.hcl, d3.rgb, d3.lab, d3.hsl and the color black\n        return 'white'\n    if isNaN(c.h)\n        return 'black'\n\n    # Find the complementary color\n    c.h = (360 - (180 + c.h)) - 180\n    c.c = 100 - c.c\n    c.l = 100 - c.l\n\n    # Increase luminance difference between 'a' and its complementary color\n    # Examples luminance pairs:\n    #    a,   before (100% - a),    after\n    #   0%,                100%,      101%\n    #  12%,                 88%,    90.55%\n    #  45%,                 55%,    88.81% <----\n    #  49%,                 51%,    97.23% <---- why this is needed\n    #  65%,                 35%,    19.53%\n    diff = Math.sign(c.l- oc.l) * Math.exp(\n        (Math.log 100) * (100 - Math.abs(c.l - oc.l))/100\n    ) / 2\n    c.l += diff\n    c\n\n\nmk_periodic_table = ->\n    # Private variables\n    svg = undefined\n    g = undefined\n    root = undefined\n    layout = undefined\n    tip = undefined\n    control_container = undefined\n    legend = undefined\n    elementsData = undefined\n    _height =\n        path: null\n        line: null\n\n    # Sane defaults\n    height = 600\n    width = Math.round(height * (1 + Math.sqrt(5)) / 2)\n\n    # Space needed: 10 down, 19 right\n    elemSize = width / 19\n    elemScale = 1.0\n\n    margin =\n        top: 5\n        left: 5\n\n    zoomed = false\n    zoom = d3.behavior.zoom()\n        .scaleExtent([0.5, 10])\n        .center([(margin.left + width) / 2, (margin.top + height) / 2])\n        .size([margin.left + width, margin.top + height])\n\n\n    # Color palette. color[n] gives a palette for n categories (3 to 9)\n    nCategories = 7\n    colorPalette = colorbrewer.YlOrRd[nCategories]\n\n    colClass = 'by_weight'\n    heightClass = 'by_weight'\n\n    classifiers =\n        by_weight:\n            # Function that extracts numerical value from node\n            accessor: (d, _) ->\n                if _? then d['atomicWeight'] = _ else d['atomicWeight']\n            # Should be a dictionary from classifier names to d3.scales\n            # classify: undefined\n        by_electronegativity:\n            accessor: (d, _) ->\n                if _? then d['eneg'] = _ else d['eneg']\n        by_boiling_point:\n            accessor: (d, _) ->\n                if _? then d['boilingPoint'] = _ else d['boilingPoint']\n        by_melting_point:\n            accessor: (d, _) ->\n                if _? then d['meltingPoint'] = _ else d['meltingPoint']\n        by_abundance:\n            accessor: (d, _) ->\n                if _? then d['abundance'] = _ else d['abundance']\n        by_density:\n            accessor: (d, _) ->\n                if _? then d['density'] = _ else d['density']\n        by_heat:\n            accessor: (d, _) ->\n                if _? then d['heat'] = _ else d['heat']\n\n    prettyNames = [\n        ['Atomic number', 'atomicNumber']\n        ['Weight (amu)', 'atomicWeight']\n        ['Boiling point (K)', 'boilingPoint']\n        ['Melting point (K)', 'meltingPoint']\n        ['Electronegativity', 'eneg']\n        ['Abundance (mg/kg)', 'abundance']\n    ]\n\n    # Should map from [0,1] to {0..classifier.size - 1}\n    floatToColor = undefined\n\n    color = (d) ->\n        if not colClass\n            return 'white'\n        c = classifiers[colClass]\n        ix = floatToColor(c.classify( c.accessor d ))\n        result = colorPalette[ix]\n        if not result?\n            result = perceivable_inverse colorPalette[nCategories - 1]\n        result\n\n    invertExtentColor = (d) ->\n        c = classifiers[colClass]\n        ix = colorPalette.indexOf(d)\n        if ix < 0\n            return '?'\n        extent = floatToColor.invertExtent(ix)\n        [c.classify.invert(extent[0]), c.classify.invert(extent[1])]\n\n    # Prepare and activate d3.tip tooltips\n    tip = d3.tip()\n        .attr('class', 'd3-tip')\n        .html((d) ->\n            # Tooltip content. Nice labels and all data within d\n            s = \"<em>#{d.name} (#{ d.sym })</em><table>\"\n\n            for [name, prop] in prettyNames\n                s += \"<tr>\n                <td>#{ name }:</td>\n                <td>#{ if d[prop]? then d[prop] else '?'}</td>\n                </tr>\"\n            s += '</table>'\n            s )\n\n    clearHighlights = ->\n        g.each((d) ->\n            d.highlighted = false\n            colorElement(d, this))\n\n    highlightElement = (d) ->\n        colorElement(d, null, -> 'blue')\n        d.highlighted = true\n\n    # Set data and draw the visualization\n    vis = (data) ->\n        elementsData = data\n        # Find range of classifiers\n        for d in elementsData\n            for k, v of classifiers\n                val = v.accessor(d)\n                if not val?\n                    continue\n\n                # Clean up the number\n                val = parseFloat(val.replace('[', '').replace(']', ''))\n                if isNaN(val)\n                    continue\n                # Set it\n                v.accessor(d, val)\n\n                if not v['max']? or v['max'] < val\n                    v['max'] = val\n\n                if not v['min']? or v['min'] > val\n                    v['min'] = val\n\n        # Define each classifier's classify() according to its range\n        for k, v of classifiers\n            step = (v['max'] - v['min']) / nCategories\n            v['classify'] = d3.scale.linear()\n                .clamp(true)\n                .domain([v['min'], v['max']])\n                .range([0,1])\n\n        if colClass\n            floatToColor = d3.scale.quantile()\n                .domain([0,1]).range(d3.range(nCategories))\n\n        # CLEAR THE ROOT\n        root.selectAll('*').remove()\n\n        # Append a new SVG\n        svg = root.append 'svg'\n            # Set dimensions, account for margins\n            .attr('width', width + 2 * margin.left)\n            .attr('height', height + 2 * margin.top)\n            # Add class\n            .classed('periodic_table', true)\n\n        # Center the SVG within the margins. Use a <g> element\n        svg.append('g')\n            .attr('transform', \"translate(#{ margin.left }, #{ margin.top })\")\n\n        # Used for Lanthanide and Actanide series (periods 6 and 7)\n        no_group_x =\n            6: 3\n            7: 3\n\n        g = svg.select('g').selectAll('g.element')\n            # Set data to the given array\n            # For each of these elements, append a <g> (SVG group)\n            .data(elementsData).enter()\n            .append('g')\n\n\n            # Every <g> gets the same class\n        g.attr('class', (d) -> \"element #{d.sym} #{d.name}\")\n            # The <g>'s 'transform' is dependent on the element\n            .each((d) ->\n                svg_elem = d3.select this\n                if d.group? # Neither a Lanthanide nor an Actanide\n                    d.x = d.group * elemSize\n                    d.y = d.period * elemSize\n                    # Make gap for Lanthanides and Actanides\n                    if d.group >= 3 then d.x += elemSize\n\n                    # Add CSS class dependent on element's group\n                    # Examples: group_1, group_2 ...\n                    svg_elem.classed \"group_#{ d.group }\", true\n                else\n                    # Place in order and with a 1 row gap\n                    # TODO XXX MAJOR BUG! WHAT IF UNORDERED IN DATA? XXX TODO\n                    d.x = (no_group_x[d.period]++) * elemSize\n                    d.y = (3 + (+d.period)) * elemSize\n\n                    # Add CSS class nogroup\n                    svg_elem.classed 'nogroup', true\n\n                # CSS period class\n                svg_elem.classed \"period_#{ d.period }\", true\n            )\n            # Translate the element according to its period + group\n            .attr('transform', (d) ->\n                \"translate(#{ d.x - elemSize/2 },#{ d.y })\n                 scale(#{ elemScale })\"\n            )\n\n        defaultText = (d) ->\n            d3.select(this)\n            .style('fill', perceivable_inverse (color d))\n        defaultColors = (d) ->\n            d3.select(this)\n            .style('fill', color d)\n            .style('stroke', perceivable_inverse (color d))\n\n        # Append a <rect> to every <g> or nothing gets shown\n        g.append('rect')\n            # Set dimensions. The (* 0.92) creates gaps between elements\n            .classed('element_box', true)\n            .attr('height', elemSize).attr('width', elemSize)\n            .attr('x', -elemSize / 2)\n            .attr('y', -elemSize / 2)\n            .each(defaultColors)\n\n        # Add <text> label to each <g>\n        g.append('text')\n            .classed('symbol box_info', true)\n            .attr('y', 7)\n            .each(defaultText)\n            # Set text to d.sym\n            # Examples: H, O, F, Ni, Uuo\n            .text (d) -> d.sym\n\n        g.append('text')\n            .classed('box_info', true)\n            .text (d) -> niceFormat d.atomicWeight\n            .attr('y', 21)\n            .each(defaultText)\n\n        g.append('text')\n            .classed('box_info', true)\n            .attr('y', -14)\n            .attr('x', 14)\n            .each(defaultText)\n            .text (d) -> d.atomicNumber\n\n        draw_controls()\n        if colClass\n            draw_legend()\n\n        svg.call(zoom)\n        # zoom off by default\n        vis.togglezoom(false)\n\n        svg.call tip\n        vis.togglehovertips(true)\n\n        vis.heightClass(heightClass)\n\n        vis\n\n    # Return the SVG\n    vis.svg = ->\n        svg\n\n    # Set/get the root\n    vis.root = (_) ->\n        if not arguments.length then return root\n        root = _\n        vis\n\n    vis.classifiers = -> classifiers\n\n    vis.togglezoom = (turnOn) ->\n        if turnOn\n            zoom.on('zoom', ->\n                zoomed = not (d3.event.scale == 1)\n                svg.select('g').attr('transform', \"translate(#{ d3.event.translate })\n                                                   scale(#{ d3.event.scale  })\")\n            )\n        else\n            zoom.on('zoom', null)\n            svg.select('g').attr('transform', \"translate(#{ margin.left }, #{ margin.top })\")\n\n\n    vis.togglehovertips = (turnOn) ->\n        if turnOn\n            g.on('mouseenter', tip.show)\n             .on('mouseleave', tip.hide)\n        else\n            g.on('mouseenter', null)\n             .on('mouseleave', null)\n\n    colorElement = (d, e, colorFun) ->\n        if d.highlighted\n            return\n\n        if not colorFun?\n            colorFun = color\n\n        if not e?\n            e = svg.select(\"g.#{ d.sym }\")\n        else\n            e = d3.select(e)\n\n        e.selectAll('path.element_box, rect.element_box')\n            .transition()\n            .style('fill', colorFun d)\n            .style('stroke', perceivable_inverse (colorFun d))\n\n        e.selectAll('line.element_box')\n             .transition()\n             .style('stroke', perceivable_inverse (colorFun d))\n\n        e.selectAll('text.box_info')\n            .transition()\n            .style('fill', perceivable_inverse (colorFun d))\n\n    vis.colClass = (_) ->\n        if not arguments.length then return colClass\n        colClass = _\n\n        if legend? then legend.remove()\n\n        if colClass\n            floatToColor = d3.scale.quantile()\n                .domain([0,1]).range(d3.range(nCategories))\n            draw_legend()\n\n        g.each((d) -> colorElement(d, this))\n\n        vis\n\n    vis.heightClass = (_) ->\n        if not arguments.length then return heightClass\n        heightClass = _\n\n        if not heightClass\n            g.selectAll('path, line').remove()\n            _height =\n                path: null\n                line: null\n\n            elemScale = 1.0\n            g.transition().attr('transform', (d) ->\n                \"translate(#{ d.x - elemSize/2 },#{ d.y })\n                scale(#{ elemScale })\")\n        else\n            elemScale = 0.7\n            g.each((d) ->\n                    c = classifiers[heightClass]\n                    h = c.classify(c.accessor d)\n                    d._heightOff = h * elemSize * Math.sqrt(2) * (1 - elemScale)\n                    if not d._heightOff? or isNaN(d._heightOff)\n                        d._heightOff = 0\n                )\n                .transition()\n                .attr('transform', (d) ->\n                    \"translate(#{ d._heightOff/2 + d.x - elemSize/2 },\n                               #{ d.y - d._heightOff/2 })\n                     scale(#{ elemScale })\"\n                )\n\n            if not _height.path?\n                _height.path = g.insert('path', ':first-child')\n                    .style('fill', (d) -> color d)\n                    .style('stroke', (d) -> perceivable_inverse (color d))\n                    .attr('class', 'element_box')\n\n            if not _height.line?\n                _height.line = g.insert('line', ':nth-child(2)')\n                .attr('class', 'element_box')\n                .style('stroke', (d) -> perceivable_inverse (color d))\n                .attr('x0', 0)\n                .attr('y0', 0)\n                .attr('x1', 0)\n                .attr('y1', 0)\n\n            _height.path\n                .transition()\n                .attr('d', (d) -> \"\n                    M #{ -elemSize/2 } #{ -elemSize/2 }\n                    l #{ -d._heightOff } #{ d._heightOff }\n                    l 0 #{ elemSize }\n                    l #{ elemSize } 0\n                    l #{ d._heightOff } #{ -d._heightOff }\n                    z\"\n                )\n\n            _height.line\n                .transition()\n                .attr('x1', (d) -> -d._heightOff - elemSize/2)\n                .attr('y1', (d) -> d._heightOff + elemSize/2)\n\n        vis\n\n\n\n    # Set/get the width and height\n    vis.dimensions = (_) ->\n        if not arguments.length then return [width, height]\n        width = _[0]\n        height = _[1]\n        vis\n\n    draw_legend = ->\n        c = classifiers[colClass]\n\n        y_per = 30\n        rows = 3\n\n        x_per = width / (nCategories + 1) * rows * 0.43\n        cols = Math.ceil((nCategories + 1) / rows)\n\n        # Color palette\n        legend = control_container.append('svg')\n            .classed('color_legend', true)\n            .style('display', 'none')\n            .attr('width', cols * x_per)\n            .attr('height', rows * y_per * 1.1)\n\n        legend_elem = legend.selectAll('g.color')\n          .data(colorPalette.concat([\n                perceivable_inverse colorPalette[nCategories - 1]] \\\n          )).enter()\n            .append('g')\n            .classed('color', true)\n            .attr('transform', (d, i) -> \"translate(#{ (i - i % rows) * x_per / rows }, #{ (i % rows) * y_per })\")\n\n        legend_elem.append('rect')\n            .classed('element_box', true)\n            .attr('width',  y_per * 0.8)\n            .attr('height', y_per * 0.8)\n            .style('fill', (d) -> d)\n            .style('stroke', (d) -> perceivable_inverse d)\n\n        legend_elem.append('text')\n            .attr('y', y_per / 2)\n            .attr('x', y_per * 0.85)\n            .text((d) ->\n                ex = invertExtentColor(d)\n                if typeof ex == 'string'\n                then \"#{ ex }\"\n                else \"#{ niceFormat(ex[0]) } - #{ niceFormat(ex[1]) }\"\n            )\n\n\n\n\n    draw_controls = ->\n        # <div> if none exists\n        if not control_container?\n            control_container = root.insert('div', ':first-child')\n            .classed('controls', true)\n\n        control_wrap = control_container.append('div')\n            .classed('main_controls', true)\n\n        control_wrap.append('h1')\n            .text('Periodic Table')\n\n        # Color classifier selector\n        for _class in [['heightClass', 'Height'], ['colClass', 'Colors']]\n            cc = control_wrap.append('p')\n\n            cc.classed(\"title cell #{ _class[0] }\", true)\n                .text(\"#{ _class[1] }: \")\n            _class = _class[0]\n\n            cc.append('span')\n                .append('select')\n                .attr('onchange', \"vis.#{ _class }(this.value)\")\n                .selectAll('option')\n                # empty string = javascript false\n                .data(Object.keys(classifiers).concat([\"\"])).enter()\n                .append('option')\n                .each((d) ->\n                    if d == vis[_class]() or (not vis[_class]() and not d)\n                        d3.select(this).attr('selected', 'selected')\n                )\n                .attr('value', (d) -> d)\n                .text((d) -> if d then d.split('_').join(' ') else 'none')\n\n        _control_wrap = control_wrap.append('p')\n        for x in ['zoom', 'hovertips']\n            cc = _control_wrap.append('span')\n            cc.append('input')\n                .attr('type', 'checkbox')\n                .attr('aria-labelledby', \"toggle_#{ x }\")\n                .attr('id', \"toggle_#{ x }_checkbox\")\n                # zoom is off by default\n                .attr('checked', if x == 'zoom' then null else 'checked')\n                .on('change', ((x) -> ->\n                    vis[\"toggle#{ x }\"]( d3.select(this).property('checked') )\n                # scope issue fix.\n                )(x) )\n\n            cc.append('label')\n                .attr('id', \"toggle_#{ x }\")\n                .attr('for', \"toggle_#{ x }_checkbox\")\n                .text(\"Toggle #{ x }\")\n\n        cc = control_wrap.append('p')\n\n        cc.append('label')\n            .attr('id', 'search_label')\n            .attr('for', 'search')\n            .text(\"Search by any property\")\n\n\n        cc.append('input')\n            .attr('type', 'input')\n            .attr('aria-labelledby', 'search_label')\n            .attr('id', 'search')\n            .attr('placeholder', 'Search here')\n            .on('input', ->\n                results = {}\n                # Search every property of every element\n                if this.value then for e in elementsData\n                    for k, v of e\n                        if (''+v).toLowerCase().indexOf(this.value.toLowerCase()) >= 0\n                            results[e.name] = e\n\n                clearHighlights()\n                highlightElement v for k,v of results\n            )\n\n    vis\n"
  ]
}